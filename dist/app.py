import streamlit as st
import fitz  # PyMuPDF
import docx
import os

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö IT-–Ω–∞–≤—ã–∫–æ–≤
SKILLS = {
    "Python", "Java", "C++", "SQL", "Git", "Linux", "Docker",
    "Kubernetes", "AWS", "Azure", "HTML", "CSS", "JavaScript",
    "React", "Node.js", "TensorFlow", "Pandas", "FastAPI", "NumPy", "Scikit-learn"
}

def extract_text_from_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def extract_text_from_docx(file):
    doc = docx.Document(file)
    return "\n".join([p.text for p in doc.paragraphs])

def extract_skills(text, marker):
    text = text.lower()
    start = text.find(marker.lower())
    if start == -1:
        return set()
    relevant_text = text[start:]
    found = {skill for skill in SKILLS if skill.lower() in relevant_text}
    return found

def compare_skills(candidate_skills, job_skills):
    match = candidate_skills & job_skills
    missing = job_skills - candidate_skills
    percent = int(len(match) / len(job_skills) * 100) if job_skills else 0
    return match, missing, percent

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏")

# üîΩ –ë–ª–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
with st.expander("üìÅ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"):
    col1, col2 = st.columns(2)
    with col1:
        if os.path.exists("resume_template.docx"):
            with open("resume_template.docx", "rb") as f:
                st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω —Ä–µ–∑—é–º–µ", f, file_name="–†–µ–∑—é–º–µ_—à–∞–±–ª–æ–Ω.docx")
        else:
            st.error("–§–∞–π–ª resume_template.docx –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    with col2:
        if os.path.exists("job_template.docx"):
            with open("job_template.docx", "rb") as f:
                st.download_button("üìù –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –≤–∞–∫–∞–Ω—Å–∏–∏", f, file_name="–í–∞–∫–∞–Ω—Å–∏—è_—à–∞–±–ª–æ–Ω.docx")
        else:
            st.error("–§–∞–π–ª job_template.docx –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üîº –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
col1, col2 = st.columns(2)

with col1:
    st.header("üìÑ –†–µ–∑—é–º–µ")
    resume_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ (PDF/DOCX)", type=["pdf", "docx"])

with col2:
    st.header("üìù –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    job_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ (PDF/DOCX)", type=["pdf", "docx"])

if resume_file and job_file:
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
        resume_text = extract_text_from_pdf(resume_file) if resume_file.name.endswith(".pdf") else extract_text_from_docx(resume_file)
        job_text = extract_text_from_pdf(job_file) if job_file.name.endswith(".pdf") else extract_text_from_docx(job_file)

        resume_skills = extract_skills(resume_text, "–ù–ê–í–´–ö–ò:")
        job_skills = extract_skills(job_text, "–¢–†–ï–ë–£–ï–ú–´–ï –ù–ê–í–´–ö–ò:")

        matched, missing, percent = compare_skills(resume_skills, job_skills)

        st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è", f"{percent}%")

        col1, col2 = st.columns(2)
        with col1:
            st.write("‚úÖ –°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏:")
            st.write(sorted(matched))
        with col2:
            st.write("‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏:")
            st.write(sorted(missing))

        st.subheader("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if missing:
            st.info("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑—É—á–∏—Ç—å: " + ", ".join(sorted(missing)))
        else:
            st.success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
